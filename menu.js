// Generated by CoffeeScript 1.9.3
(function() {
  var Page, cmd, getParentsInclusive, home, i, len, makeOrderedList, menustructure, p, page, pagehierarchy, print, ref, ref1, renderBreadcrumbs, renderLink, renderLinkNextPage, renderLinkNextSibling, renderLinkParent, renderLinkPreviousPage, renderLinkPreviousSibling, renderMenuDefault, renderMenuEntry, renderSimpleBreadcrumbs, util;

  util = require('util');

  Page = require('./page');

  menustructure = require('./menustructure');

  getParentsInclusive = function(p) {
    var parentsinc;
    parentsinc = [];
    while (p != null) {
      parentsinc.unshift(p);
      p = p.parent;
    }
    return parentsinc;
  };

  makeOrderedList = function(clazz, entries) {
    var classattr, entry, i, len, lis;
    lis = '';
    for (i = 0, len = entries.length; i < len; i++) {
      entry = entries[i];
      lis += "<li>" + entry + "</li>";
    }
    if (clazz != null) {
      classattr = " class=\"" + clazz + "\"";
    } else {
      classattr = '';
    }
    return "<ol" + classattr + ">" + lis + "</ol>";
  };

  print = function(p) {
    if (p == null) {
      p = home;
    }
    if (p.parent != null) {
      p.parent = p.parent.name;
    }
    return console.log(util.inspect(p, false, null));
  };

  renderLink = function(p) {
    if (p != null) {
      return "<a href=\"" + p.path + "\">" + p.name + "</a>";
    } else {
      return '';
    }
  };

  renderLinkParent = function(p) {
    if (p.parent != null) {
      return renderLink(p.parent);
    } else {
      return '';
    }
  };

  renderLinkPreviousSibling = function(p) {
    var i, len, prevSibling, ref, sib;
    if (p.parent != null) {
      ref = p.parent.children;
      for (i = 0, len = ref.length; i < len; i++) {
        sib = ref[i];
        if (p.parent.children.indexOf(sib) + 1 === p.parent.children.indexOf(p)) {
          prevSibling = sib;
        }
      }
      return renderLink(prevSibling);
    } else {
      return '';
    }
  };

  renderLinkNextSibling = function(p) {
    var i, len, prevSibling, ref, sib;
    if (p.parent != null) {
      ref = p.parent.children;
      for (i = 0, len = ref.length; i < len; i++) {
        sib = ref[i];
        if (p.parent.children.indexOf(sib) - 1 === p.parent.children.indexOf(p)) {
          prevSibling = sib;
        }
      }
      return renderLink(prevSibling);
    } else {
      return '';
    }
  };

  renderLinkPreviousPage = function(p) {
    var i, len, prevSibling, ref, sib;
    if (p.parent != null) {
      ref = p.parent.children;
      for (i = 0, len = ref.length; i < len; i++) {
        sib = ref[i];
        if (p.parent.children.indexOf(sib) + 1 === p.parent.children.indexOf(p)) {
          prevSibling = sib;
        }
      }
      if (p != null) {
        return "<a href=\"" + p.path + "\" class=\"prevPage\"></a>";
      } else {
        return '';
      }
    } else {
      return '';
    }
  };

  renderLinkNextPage = function(p) {
    var i, len, prevSibling, ref, sib;
    if (p.parent != null) {
      ref = p.parent.children;
      for (i = 0, len = ref.length; i < len; i++) {
        sib = ref[i];
        if (p.parent.children.indexOf(sib) - 1 === p.parent.children.indexOf(p)) {
          prevSibling = sib;
        }
      }
      if (p != null) {
        return "<a href=\"" + p.path + "\" class=\"nextPage\"></a>";
      } else {
        return '';
      }
    } else {
      return '';
    }
  };

  renderSimpleBreadcrumbs = function(p) {
    var entries, i, len, page, ref;
    entries = [];
    ref = getParentsInclusive(p);
    for (i = 0, len = ref.length; i < len; i++) {
      page = ref[i];
      entries.push(renderLink(page));
    }
    return makeOrderedList('breadcrumbs', entries);
  };

  renderBreadcrumbs = function(p) {
    var child, children, entries, i, j, len, len1, page, ref, ref1;
    entries = [];
    ref = getParentsInclusive(p);
    for (i = 0, len = ref.length; i < len; i++) {
      page = ref[i];
      children = [];
      ref1 = page.children;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        child = ref1[j];
        children.push(renderLink(child));
      }
      entries.push(renderLink(page) + makeOrderedList(null, children));
    }
    return makeOrderedList('breadcrumbs', entries);
  };

  renderMenuEntry = function(clazz, p) {
    var child, i, j, len, len1, lis, ref, ref1, section;
    lis = [];
    lis.push(renderLink(p));
    if ((p.children != null) && p.children.length > 0) {
      ref = p.children;
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        lis.push(renderMenuEntry(null, child));
      }
    } else {
      if (p.sections != null) {
        ref1 = p.sections;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          section = ref1[j];
          lis.push(renderLink(section));
        }
      }
    }
    return makeOrderedList(clazz, lis);
  };

  renderMenuDefault = function(p) {
    return renderMenuEntry('menu', p);
  };

  cmd = (ref = process.argv[2]) != null ? ref : 'print';

  pagehierarchy = [];

  if (process.argv.indexOf('-p') === 3) {
    ref1 = process.argv;
    for (i = 0, len = ref1.length; i < len; i++) {
      p = ref1[i];
      if (process.argv.indexOf(p) > 3) {
        pagehierarchy.push(p);
      }
    }
  }

  home = Page.parse(menustructure);

  page = home.recursiveChild(pagehierarchy);

  switch (cmd) {
    case 'print':
      print(page);
      break;
    case 'link':
      console.log(renderLink(page));
      break;
    case 'linkParent':
      console.log(renderLinkParent(page));
      break;
    case 'linkPrev':
      console.log(renderLinkPreviousSibling(page));
      break;
    case 'linkNext':
      console.log(renderLinkNextSibling(page));
      break;
    case 'linkPrevPage':
      console.log(renderLinkPreviousPage(page));
      break;
    case 'linkNextPage':
      console.log(renderLinkNextPage(page));
      break;
    case 'breadcrumbsSimple':
      console.log(renderSimpleBreadcrumbs(page));
      break;
    case 'breadcrumbs':
      console.log(renderBreadcrumbs(page));
      break;
    case 'menu':
      console.log(renderMenuDefault(page));
  }

}).call(this);
