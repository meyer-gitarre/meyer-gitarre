// Generated by CoffeeScript 1.9.3
(function() {
  var Page, cmd, getParentsInclusive, home, j, len, makeOrderedList, menustructure, p, page, pagehierarchy, print, ref, ref1, renderBreadcrumbs, renderLink, renderLinkNextPage, renderLinkNextSibling, renderLinkParent, renderLinkPreviousPage, renderLinkPreviousSibling, renderMenuDefault, renderMenuEntry, renderSimpleBreadcrumbs, util,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  util = require('util');

  Page = require('./page');

  menustructure = require('./menustructure');

  getParentsInclusive = function(p) {
    var parentsinc;
    parentsinc = [];
    while (p != null) {
      parentsinc.unshift(p);
      p = p.parent;
    }
    return parentsinc;
  };

  makeOrderedList = function(clazz, entries) {
    var classattr, entry, j, len, lis;
    lis = '';
    for (j = 0, len = entries.length; j < len; j++) {
      entry = entries[j];
      lis += "<li>" + entry + "</li>";
    }
    if (clazz != null) {
      classattr = " class=\"" + clazz + "\"";
    } else {
      classattr = '';
    }
    return "<ol" + classattr + ">" + lis + "</ol>";
  };

  print = function(p) {
    if (p == null) {
      p = home;
    }
    if (p.parent != null) {
      p.parent = p.parent.name;
    }
    return console.log(util.inspect(p, false, null));
  };

  renderLink = function(p) {
    if (p != null) {
      return "<a href=\"" + p.path + "\">" + p.name + "</a>";
    } else {
      return '';
    }
  };

  renderLinkParent = function(p) {
    if (p.parent != null) {
      return renderLink(p.parent);
    } else {
      return '';
    }
  };

  renderLinkPreviousSibling = function(p) {
    var j, len, prevSibling, ref, sib;
    if (p.parent != null) {
      ref = p.parent.children;
      for (j = 0, len = ref.length; j < len; j++) {
        sib = ref[j];
        if (p.parent.children.indexOf(sib) + 1 === p.parent.children.indexOf(p)) {
          prevSibling = sib;
        }
      }
      return renderLink(prevSibling);
    } else {
      return '';
    }
  };

  renderLinkNextSibling = function(p) {
    var j, len, prevSibling, ref, sib;
    if (p.parent != null) {
      ref = p.parent.children;
      for (j = 0, len = ref.length; j < len; j++) {
        sib = ref[j];
        if (p.parent.children.indexOf(sib) - 1 === p.parent.children.indexOf(p)) {
          prevSibling = sib;
        }
      }
      return renderLink(prevSibling);
    } else {
      return '';
    }
  };

  renderLinkPreviousPage = function(p) {
    var j, len, prevSibling, ref, sib;
    if (p.parent != null) {
      ref = p.parent.children;
      for (j = 0, len = ref.length; j < len; j++) {
        sib = ref[j];
        if (p.parent.children.indexOf(sib) + 1 === p.parent.children.indexOf(p)) {
          prevSibling = sib;
        }
      }
      if (p != null) {
        return "<a href=\"" + p.path + "\" class=\"prevPage\"></a>";
      } else {
        return '';
      }
    } else {
      return '';
    }
  };

  renderLinkNextPage = function(p) {
    var j, len, prevSibling, ref, sib;
    if (p.parent != null) {
      ref = p.parent.children;
      for (j = 0, len = ref.length; j < len; j++) {
        sib = ref[j];
        if (p.parent.children.indexOf(sib) - 1 === p.parent.children.indexOf(p)) {
          prevSibling = sib;
        }
      }
      if (p != null) {
        return "<a href=\"" + p.path + "\" class=\"nextPage\"></a>";
      } else {
        return '';
      }
    } else {
      return '';
    }
  };

  renderSimpleBreadcrumbs = function(p) {
    var entries, j, len, page, ref;
    entries = [];
    ref = getParentsInclusive(p);
    for (j = 0, len = ref.length; j < len; j++) {
      page = ref[j];
      entries.push(renderLink(page));
    }
    return makeOrderedList('breadcrumbs', entries);
  };

  renderBreadcrumbs = function(p) {
    var child, children, entries, j, k, len, len1, page, ref, ref1;
    entries = [];
    ref = getParentsInclusive(p);
    for (j = 0, len = ref.length; j < len; j++) {
      page = ref[j];
      children = [];
      ref1 = page.children;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        child = ref1[k];
        children.push(renderLink(child));
      }
      entries.push(renderLink(page) + makeOrderedList(null, children));
    }
    return makeOrderedList('breadcrumbs', entries);
  };

  renderMenuEntry = function(clazz, p, ignoreImportant) {
    var child, flag, i, imp, importantEntry, importantEntryClassless, importants, j, k, l, len, len1, len2, len3, len4, len5, li, lis, m, n, o, page, ref, ref1, ref2, ref3, section;
    if (ignoreImportant == null) {
      ignoreImportant = false;
    }
    lis = [];
    lis.push(renderLink(p));
    if ((p.children != null) && p.children.length > 0) {
      ref = p.children;
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        lis.push(renderMenuEntry(null, child, ignoreImportant));
      }
    } else {
      if ((p.sections != null) && p.sections.length > 0) {
        ref1 = p.sections;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          section = ref1[k];
          lis.push(renderMenuEntry(null, section, ignoreImportant));
        }
      }
    }
    importants = [];
    ref2 = getParentsInclusive(p);
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      page = ref2[l];
      if ((page.important != null) && page.important.length > 0) {
        ref3 = page.important;
        for (m = 0, len3 = ref3.length; m < len3; m++) {
          imp = ref3[m];
          importants.unshift(imp);
        }
      }
    }
    if (!ignoreImportant) {
      for (n = 0, len4 = importants.length; n < len4; n++) {
        i = importants[n];
        importantEntry = renderMenuEntry('important', i, true);
        importantEntryClassless = renderMenuEntry(null, i, true);
        if (!(indexOf.call(lis, importantEntry) >= 0 || indexOf.call(lis, importantEntryClassless) >= 0)) {
          flag = true;
          for (o = 0, len5 = lis.length; o < len5; o++) {
            li = lis[o];
            if ((li.indexOf(importantEntry) !== -1) || (li.indexOf(importantEntryClassless) !== -1)) {
              flag = false;
            }
          }
          if (flag) {
            lis.push(importantEntry);
          }
        }
      }
    }
    return makeOrderedList(clazz, lis);
  };

  renderMenuDefault = function(p) {
    return renderMenuEntry('menu', p);
  };

  cmd = (ref = process.argv[2]) != null ? ref : 'print';

  pagehierarchy = [];

  if (process.argv.indexOf('-p') === 3) {
    ref1 = process.argv;
    for (j = 0, len = ref1.length; j < len; j++) {
      p = ref1[j];
      if (process.argv.indexOf(p) > 3) {
        pagehierarchy.push(p);
      }
    }
  }

  home = Page.parse(menustructure);

  page = home.recursiveChild(pagehierarchy);

  switch (cmd) {
    case 'print':
      print(page);
      break;
    case 'link':
      console.log(renderLink(page));
      break;
    case 'linkParent':
      console.log(renderLinkParent(page));
      break;
    case 'linkPrev':
      console.log(renderLinkPreviousSibling(page));
      break;
    case 'linkNext':
      console.log(renderLinkNextSibling(page));
      break;
    case 'linkPrevPage':
      console.log(renderLinkPreviousPage(page));
      break;
    case 'linkNextPage':
      console.log(renderLinkNextPage(page));
      break;
    case 'breadcrumbsSimple':
      console.log(renderSimpleBreadcrumbs(page));
      break;
    case 'breadcrumbs':
      console.log(renderBreadcrumbs(page));
      break;
    case 'menu':
      console.log(renderMenuDefault(page));
  }

}).call(this);
